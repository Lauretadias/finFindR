% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/traceFromHttp.R
\name{processFinFromHttp}
\alias{processFinFromHttp}
\title{traceFinFromHttp}
\usage{
processFinFromHttp(imageobj)
}
\arguments{
\item{fin}{Value of type cimg. Load the image via load.image("directory/finImage.JPG")}

\item{startStopCoords}{list of 3 coordinates: leadingEnd, startPoint, trailingEnd. If NULL, these points are estimated}

\item{pathNet}{mxnet model for isolating trailing edge}
}
\value{
Value of type list containing:
"coordinates" a dataframe of coordinates
"annulus" a 3 channel image of isolated features
}
\details{
\code{traceFromImage} wrapper for use through opencpu.
opencpu passes temp object name to function
curl -v http://server:port/ocpu/library/finFindR/R/traceFinFromHttp -F "imageobj=[@yourfile1.jpg,@yourfile2.jpg]"
aka: traceFinFromHttp(imageobj = list("yourfile1.jpg","yourfile2.jpg"))

Processes an image(cimg) containing a fin. 
First the image undergoes cleanup through a variety of filters and glare removal via
\code{constrainSizeFinImage} and \code{fillGlare}
These processes help enhance edge clarity.
The trailing edge is highlighted via neural network. 
The image is then cropped down to the trailing edge for efficiency purposes.
The canny edges are then extracted from the crop and passed to 
\code{traceFromCannyEdges}
which isolates coordinates for the trailing edge. These coordinates are then passed to
\code{extractAnnulus}
which collects image data used for identification.
Both the coordinates and the image annulus are then returned.
}

